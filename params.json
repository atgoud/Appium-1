{"name":"Mobile Test Automation Framework (MTAF)","tagline":"Native iOS/Android app test automation with Appium","body":"### Welcome to MTAF Pages.\r\nMobile Test Automation Framework (MTAF) is a test automation framework which provides seamless testing of a wide range of web-browsers, mobile browsers and native mobile applications such as iOS and Android application:\r\n\r\n**Example,** Create a TimeoutsConfig instance. You can also just use TimeoutsConfig.defaultTimeoutsConfig().\r\n\r\n\r\n    TimeoutsConfig timeouts = TimeoutsConfig.builder()\r\n        .clickTimeoutSeconds(2)\r\n        .webElementPresenceTimeoutSeconds(5) \r\n        .pageLoadTimoutSeconds(10) \r\n       .implicitWaitTimeoutMillis(2000)\r\n       .build();\r\n\r\n\r\n**Example,** Chrome Browser in Selenium\r\n\r\n\r\n    Browser browser = LocalBrowserBuilder.getChromeBuilder(\"http://my.webapp.com/webapp\") \r\n        .withTimeoutsConfig(timeouts)              \r\n        .withBrowserLocale(Locale.US.toString())   \r\n        .withStartWindowWidth(1280)               \r\n        .withStartWindowHeight(1024)               \r\n        .withBrowserLogLevel(Level.INFO)         \r\n        .withBrowserLogFile(\"chromedriver.log\")   \r\n        .build();\r\n\r\n    TopLevelPage googleHomePage = browser.openPageByUrl(\"http://google.com\");\r\n\r\n\r\n\r\n**Example,** Sample code creating a Mobile instance (Android) in PageObject/PageFactory\r\n\r\n    TimeoutsConfig timeouts = getTimeoutsConfig();\r\n    MobileBrowser mobile = createAndroidTest(timeouts);\r\n    mobile.getActions().loadTopLevelPage(LoginPage.class).login();\r\n    mobile.quit();\r\n\r\n    private MobileBrowser createAndroidTest(TimeoutsConfig timeouts) throws WebDriverException {\r\n           return MobileBrowserBuilder.getAndroidBuilder(android.getAppUrl())\r\n                .withTimeoutsConfig(timeouts)\r\n                .withPlatformVersion(android.getPlatformVersion())\r\n                .withDeviceName(android.getDeviceName())\r\n                .withApp(android.getAppPath())\r\n                .withAppPackage(android.getAppPackage())\r\n                .withAppActivity(android.getAppAcitivity())\r\n                .build();\r\n    private TimeoutsConfig getTimeoutsConfig() {\r\n         return TimeoutsConfig.builder()\r\n                .pageLoadTimoutSeconds(10)\r\n                .implicitWaitTimeoutMillis(20000)\r\n                .build();\r\n}\r\n\r\n### SeleniumActions\r\n* SeleniumActions are for interacting with the DOM and javascript of a page.\r\n* Obtain a SeleniumActions from a Browser instance with browser.getActions()\r\n* Provides methods for waiting until a WebElement is present or visible.\r\n* Provides methods to refresh the page until a WebElement is present or visible.\r\n* Provides methods for finding a WebElement containing specific text.\r\n* Provides methods for interacting with Tiny MCE text editors.\r\n* Provides methods to load Pages.\r\n* Provides much more functionality.\r\n* Pages\r\n\r\nPages provide an abstraction for modeling the pages for your webapp.\r\nPages should extend BaseTopLevelPage or BaseSubPage.\r\nUses the Selenium @FindBy annotation to instantiate member variables that are WebElements.\r\nUse the annotation @SubPageField to indicate a member variable that is a SubPage and should be instantiated on page load.\r\nModel the actions that you can perform on your web pages in your Page classes.\r\nThen, test code is incredibly simple. It just delegates to Page classes and performs high-level actions.\r\n\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the javadocs documentation at http://sayems.github.io/appium/ or contact syed@sayem.org and Iâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}